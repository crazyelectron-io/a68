                        ;	NAM	SWTBUG
                        ;*	VERSION 1.00
                        
                        ;	OPT	PAG
                        ;****************************************************
                        ;*REPLACEMENT FOR MIKBUG ROM
                        ;*FOR SWTPC 6800 COMPUTER SYSTEM
                        ;*COPYRIGHT 1977
                        ;*SOUTHWEST TECHNICAL PROD. CORP.
                        ;*AUGUST, 1977
                        ;****************************************************
                        
                        
   a000                 	ORG	$A000
   a000                 IRQ	RMB	2	;IRQ POINTER
   a002                 BEGA	RMB	2	;BEGINNING ADDR PNCH
   a004                 ENDA	RMB	2	;ENDING ADDR PNCH
   a006                 NMI	RMB	2	;NMI INTERRUPT VECTOR
   a008                 SP	RMB	1	;S HIGH
   a009                 	RMB	1	;S LOW
   a00a                 PORADD	RMB	2	;PORT ADDRESS
   a00c                 PORECH	RMB	1	;ECHO ON/OFF FLAG
   a00d                 XHI	RMB	1	;XREG HIGH
   a00e                 XLOW	RMB	1	;XREG LOW
   a00f                 CKSM	RMB	1	;CHECKSUM
   a010                 XTEMP	RMB	2	;X-REG TEMP STGE
   a012                 SWIJMP	RMB	2	;SWI JUMP VECTOR
   a044                 TW	EQU	$A044	;TEMPORARY STORAGE
   a046                 TEMP	EQU	$A046	;TEMPORARY STORAGE
   a047                 BYTECT	EQU	$A047		;BYTECT AND MCONT TEMP.
   8004                 CTLPOR	EQU	$8004		;CONTROL PORT ADDRESS
   c000                 PROM	EQU	$C000	;JUMP TO PROM ADDRESS
   a014                 BKPT	RMB	2	;BREAKPOINT ADDRESS
   a016                 BKLST	RMB	1	;BREAKPOINT DATA
                        
   a042                 	ORG	$A042
   a042                 STACK	RMB	1	;SWTBUG STACK
                        
   e000                 	ORG	$E000
                        
                        ;*I/O INTERRUPT SEQUENCE
   e000   fe a0 00      IRQV	LDX	IRQ
   e003   6e 00         	JMP	0,X
                        
                        ;*JUMP TO USER PROGRAM
   e005   8d 40         JUMP	BSR	BADDR
   e007   6e 00         	JMP	0,X
                        
   e009   10 16 04      CURSOR	FCB	$10,$16,4	;CT-1024 CURSOR CONTROL
                        ;*ASCII LOADING ROUTINE
   e00c   bd e3 34      LOAD	JSR	RDON	;READER ON, DIS ECHO, GET P#
   e00f   8d 67         LOAD3	BSR	INCH
   e011   81 53         	CMP A	#'S'
   e013   26 fa         	BNE	LOAD3	;1ST CHAR NOT S
   e015   8d 61         	BSR	INCH	;READ CHAR
   e017   81 39         	CMP A	#'9'
   e019   27 29         	BEQ	LOAD21
   e01b   81 31         	CMP A	#'1'
   e01d   26 f0         	BNE	LOAD3	;2ND CHAR NOT 1
   e01f   7f a0 0f      	CLR	CKSM	;ZERO CHECKSUM
   e022   8d 31         	BSR	BYTE	;READ BYTE
   e024   80 02         	SUB A	#2
   e026   b7 a0 47      	STA A	BYTECT ;BYTE COUNT
                        ;*BUILD ADDRESS
   e029   8d 1c         	BSR	BADDR
                        ;*STORE DATA
   e02b   8d 28         LOAD11	BSR	BYTE
   e02d   7a a0 47      	DEC	BYTECT
   e030   27 09         	BEQ	LOAD15	;ZERO BYTE COUNT
   e032   a7 00         	STA A	0,X	;STORE DATA
   e034   a1 00         	CMP A	0,X	;DATA STORED?
   e036   26 08         	BNE	LOAD19
   e038   08            	INX
   e039   20 f0         	BRA	LOAD11
   e03b   7c a0 0f      LOAD15	INC	CKSM
   e03e   27 cf         	BEQ	LOAD3
   e040   86 3f         LOAD19	LDA A	#'?'
   e042   8d 31         	BSR	OUTCH
   e044   7e e2 d4      LOAD21	JMP	RDOFF1
                        
                        ;*BUILD ADDRESS
   e047   8d 0c         BADDR	BSR	BYTE	;READ 2 FRAMES
   e049   b7 a0 0d      	STA A	XHI
   e04c   8d 07         	BSR	BYTE
   e04e   b7 a0 0e      	STA A	XLOW
   e051   fe a0 0d      	LDX	XHI	;LOAD IXR WITH NUMBER
   e054   39            	RTS
                        
                        ;*INPUT BYTE (TWO FRAMES)
   e055   8d 53         BYTE	BSR	INHEX	;GET HEX CHAR
   e057   48            BYTE1	ASL A
   e058   48            	ASL A
   e059   48            	ASL A
   e05a   48            	ASL A
   e05b   16            	TAB
   e05c   8d 4c         	BSR	INHEX
   e05e   1b            	ABA
   e05f   16            	TAB
   e060   fb a0 0f      	ADD B	CKSM
   e063   f7 a0 0f      	STA B	CKSM
   e066   39            	RTS
                        
   e067   44            OUTHL	LSR A		;OUT HEX LEFT BCD DIGIT
   e068   44            	LSR A
   e069   44            	LSR A
   e06a   44            	LSR A
   e06b   84 0f         OUTHR	AND A	#$F	;OUT HEX RIGHT BCD DIGIT
   e06d   8b 30         	ADD A	#$30
   e06f   81 39         	CMP A	#$39
   e071   23 02         	BLS	OUTCH
   e073   8b 07         	ADD A	#$7
                        
                        ;*OUTPUT ONE CHAR
   e075   7e e1 d1      OUTCH	JMP	OUTEEE
   e078   7e e1 ac      INCH	JMP	INEEE
                        
                        ;*PRINT DATA POINTED TO BY X REG
   e07b   8d f8         PDATA2	BSR	OUTCH
   e07d   08            	INX
   e07e   a6 00         PDATA1	LDA A	0,X
   e080   81 04         	CMP A	#4
   e082   26 f7         	BNE	PDATA2
   e084   39            	RTS	;STOP	ON HEX 04
                        
   e085   7e e1 4a      C1	JMP	SWTCTL
                        
                        ;*MEMORY EXAMINE AND CHANGE
   e088   8d bd         CHANGE	BSR	BADDR
   e08a   ce e1 9d      CHA51	LDX	#MCL
   e08d   8d ef         	BSR	PDATA1	;C/R L/F
   e08f   ce a0 0d      	LDX	#XHI
   e092   8d 34         	BSR	OUT4HS	;PRINT ADDRESS
   e094   fe a0 0d      	LDX	XHI
   e097   8d 31         	BSR	OUT2HS	;PRINT OLD DATA
   e099   8d 31         	BSR	OUTS	;OUTPUT SPACE
   e09b   8d db         ANOTH	BSR	INCH	;INPUT CHAR
   e09d   81 20         	CMP A	#$20
   e09f   27 fa         	BEQ	ANOTH
   e0a1   81 0d         	CMP A	#$D
   e0a3   27 e0         	BEQ	C1
   e0a5   81 5e         	CMP A	#'^'	;UP ARROW?
   e0a7   20 2c         	BRA	AL3	;BRANCH FOR ADJUSTMENT
   e0a9   01            	NOP
                        ;*INPUT HEX CHARACTER
   e0aa   8d cc         INHEX	BSR	INCH
   e0ac   80 30         INHEX1	SUB A	#$30
   e0ae   2b 4c         	BMI	C3
   e0b0   81 09         	CMP A	#$9
   e0b2   2f 0a         	BLE	IN1HG
   e0b4   81 11         	CMP A	#$11
   e0b6   2b 44         	BMI	C3	;NOT HEX
   e0b8   81 16         	CMP A	#$16
   e0ba   2e 40         	BGT	C3	;NOT HEX
   e0bc   80 07         	SUB A	#7
   e0be   39            IN1HG	RTS
                        
   e0bf   a6 00         OUT2H		LDA A	0,X	;OUTPUT 2 HEX CHAR
   e0c1   8d a4         OUT2HA	BSR	OUTHL	 ;OUT LEFT HEX CHAR
   e0c3   a6 00         	LDA A	0,X
   e0c5   08            	INX
   e0c6   20 a3         	BRA	OUTHR	; OUTPUT RIGHT HEX CHAR
                        
   e0c8   8d f5         OUT4HS	BSR	OUT2H	 ;OUTPUT 4 HEX CHAR + SPACE
   e0ca   8d f3         OUT2HS	BSR	OUT2H	 ;OUTPUT 2 HEX CHAR + SPACE
                        
   e0cc   86 20         OUTS	LDA A	#$20	;SPACE
   e0ce   20 a5         	BRA	OUTCH		;(BSR & TRS))
                        
                        ;*ENTER POWER ON SEQUENCE
   e0d0   8e a0 42      START	LDS	#STACK
   e0d3   20 2c         	BRA	AL1	;BRANCH FOR ADDRESS COMPATIBIL
                        
                        ;********************************************
                        ;*PART OF MEMORY EXAMINE AND CHANGE
   e0d5   26 07         AL3	BNE	SK1
   e0d7   09            	DEX
   e0d8   09            	DEX
   e0d9   ff a0 0d      	STX	XHI
   e0dc   20 ac         	BRA	CHA51
   e0de   ff a0 0d      SK1	STX	XHI
   e0e1   20 02         	BRA	AL4
                        
   e0e3   20 6d         EOE3	BRA	CONTRL	;BRANCH FOR MIKBUG EQUIV. CONT
                        
   e0e5   81 30         AL4	CMP A	#$30
   e0e7   25 a1         	BCS	CHA51
   e0e9   81 46         	CMP A	#$46
   e0eb   22 9d         	BHI	CHA51
   e0ed   8d bd         	BSR	INHEX1
   e0ef   bd e0 57      	JSR	BYTE1
   e0f2   09            	DEX
   e0f3   a7 00         	STA A	0,X	;CHANGE MEMORY
   e0f5   a1 00         	CMP A	0,X
   e0f7   27 91         	BEQ	CHA51		;DID CHANGE
   e0f9   7e e0 40      	JMP	LOAD19	;DIDN'T CHANGE
   e0fc   be a0 08      C3	LDS	SP
   e0ff   20 49         	BRA	SWTCTL
                        ;**************************************************
                        
                        ;*CONTINUE POWER UP SEQUENCE
   e101   bf a0 08      AL1	STS	SP	;INIT TARGET STACK PTR.
   e104   86 ff         	LDA A	#$FF
   e106   bd e3 08      	JSR	SWISET
                        ;*CONFIGURE FOR PIA AND SEE IF OK
   e109   ce 80 04      	LDX	#CTLPOR
   e10c   bd e2 84      	JSR	PIAINI	;INIT PIA
   e10f   a6 00         	LDA A	0,X
   e111   a1 02         	CMP A	2,X
   e113   20 02         	BRA	AL2
                        
   e115   20 19         	BRA	PRINT		;BRA FOR BILOAD
                        
   e117   26 39         AL2	BNE	CONTRL
                        
                        ;*INITIALIZE AS ACIA
   e119   86 03         	LDA A	#3	;ACIA MASTER RESET
   e11b   a7 00         	STA A	0,X
   e11d   86 11         	LDA A	#$11
   e11f   a7 00         	STA A	0,X
   e121   20 2f         	BRA	CONTRL
                        
                        ;*ENTER FROM SOFTWARE INTERRUPT
   e123   01            SF0	NOP
   e124   bf a0 08      SFE1	STS	SP	;SAVE TARGETS STACK POINTER
                        ;*DECREMENT P COUNTER
   e127   30            	TSX
   e128   6d 06         	TST	6,X
   e12a   26 02         	BNE	*+4
   e12c   6a 05         	DEC	5,X
   e12e   6a 06         	DEC	6,X
                        ;*PRINT CONTENTS OF STACK.
   e130   ce e1 9d      PRINT	LDX	#MCL
   e133   bd e0 7e      	JSR	PDATA1
   e136   fe a0 08      	LDX	SP
   e139   08            	INX
   e13a   8d 8e         	BSR	OUT2HS	;COND CODES
   e13c   8d 8c         	BSR	OUT2HS	;ACC B
   e13e   8d 8a         	BSR	OUT2HS	;ACC A
   e140   8d 86         	BSR	OUT4HS	;IXR
   e142   8d 84         	BSR	OUT4HS	;PGM COUNTER
   e144   ce a0 08      	LDX	#SP
   e147   bd e0 c8      	JSR	OUT4HS	;STACK POINTER
   e14a   fe a0 12      SWTCTL	LDX	SWIJMP
   e14d   8c e1 23      	CPX	#SF0
   e150   27 19         	BEQ	CONTR1
                        
   e152   8e a0 42      CONTRL	LDS	#STACK	;SET CONTRL STACK POINTER
   e155   ce 80 04      	LDX	#CTLPOR	;RESET TO CONTROL PORT
   e158   ff a0 0a      	STX	PORADD
   e15b   7f a0 0c      	CLR	PORECH	;TURN ECHO ON
   e15e   8d 73         	BSR	SAVGET	;GET PORT # AND TYPE
   e160   27 03         	BEQ	POF1
   e162   bd e2 7d      	JSR	PIAECH	;SET PIA ECHO ON IF MP-C INTER
   e165   bd e3 53      POF1	JSR	PNCHOF	;TURN PUNCH OFF
   e168   bd e3 47      	JSR	RDOFF		;TURN READER OFF
   e16b   ce e1 9c      CONTR1	LDX	#MCLOFF
   e16e   bd e0 7e      	JSR	PDATA1	;PRINT DATA STRING
   e171   8d 39         	BSR	INEEE		;READ COMMAND CHARACTER
                        
                        ;*COMMAND LOOKUP ROUTINE
   e173   ce e3 d1      LOOK	LDX	#TABLE
   e176   a1 00         OVER	CMP A	0,X
   e178   26 07         	BNE	SK3
   e17a   bd e0 cc      	JSR	OUTS	;SKIP SPACE
   e17d   ee 01         	LDX	1,X
   e17f   6e 00         	JMP	0,X
   e181   08            SK3	INX
   e182   08            	INX
   e183   08            	INX
   e184   8c e3 f8      	CPX	#TABEND+3
   e187   26 ed         	BNE	OVER
   e189   20 bf         SWTL1	BRA	SWTCTL
                        
                        ;*SOFTWARE INTERRUPT ENTRY POINT
   e18b   fe a0 12      SFE	LDX	SWIJMP	;JUMP TO VECTORED SOFTWARE INT
   e18e   6e 00         	JMP	0,X
                        
   e190   53 39 04      S9	FCB	'S','9',4	;END OF TAPE
                        
                        ;***************************************************
   e193   0d 0a 15 00   MTAPE1	FCB	$D,$A,$15,0,0,0,'S','1',4	;PUNCH FORMAT
   e197   00 00 53 31   
   e19b   04            
                        
   e19c   13            MCLOFF	FCB	$13	;READER OFF
   e19d   0d 0a 15 00   MCL	FCB	$D,$A,$15,0,0,0,'$',4
   e1a1   00 00 24 04   
                        
   e1a5   20 4c         EIA5	BRA	BILD	;BINARY LOADER INPUT
                        ;***************************************************
                        
                        
                        ;*NMI SEQUENCE
   e1a7   fe a0 06      NMIV	LDX	NMI	;GET NMI VECTOR
   e1aa   6e 00         	JMP	0,X
                        
   e1ac   20 40         INEEE	BRA	INEEE1
                        
                        ;*BYTE SEARCH ROUTINE
   e1ae   bd e0 47      SEARCH	JSR	BADDR	;GET TOP ADDRESS
   e1b1   ff a0 04      	STX	ENDA
   e1b4   bd e0 47      	JSR	BADDR	;GET BOTTOM ADDRESS
   e1b7   bd e0 55      	JSR	BYTE	;GET BYTE TO SEARCH FOR
   e1ba   16            	TAB
   e1bb   a6 00         OVE	LDA A	0,X
   e1bd   ff a0 0d      	STX	XHI
   e1c0   11            	CBA
   e1c1   27 02         	BEQ	PNT
   e1c3   20 21         	BRA	INCR1
   e1c5   ce e1 9d      PNT	LDX	#MCL
   e1c8   bd e0 7e      	JSR	PDATA1
   e1cb   ce a0 0d      	LDX	#XHI
   e1ce   20 10         	BRA	SKP0
                        ;***************************************************
                        
                        ;*GO TO USER PROGRAM ROUTINE
   e1d0   3b            GOTO	RTI
   e1d1   20 3a         OUTEEE	BRA	OUTEE1
                        
                        
                        
                        ;*SAVE IXR AND LOAD IXR WITH CORRECT
                        ;*PORT NUMBER AND TEST FOR TYPE
   e1d3   ff a0 10      SAVGET	STX	XTEMP	;STORE INDEX REGISTER
   e1d6   fe a0 0a      GETPT1	LDX	PORADD
   e1d9   37            ISACIA	PSH B
   e1da   e6 01         	LDA B	1,X
   e1dc   e1 03         	CMP B	3,X
   e1de   33            	PUL B
   e1df   39            	RTS
                        ;***************************************************
                        
                        ;*CONTINUATION OF SEARCH ROUTINE
   e1e0   bd e0 c8      SKP0	JSR	OUT4HS
   e1e3   fe a0 0d      	LDX	XHI
   e1e6   bc a0 04      INCR1	CPX	ENDA
   e1e9   27 9e         	BEQ	SWTL1
   e1eb   08            	INX
   e1ec   20 cd         	BRA	OVE
                        
   e1ee   8d 06         INEEE1	BSR	INCH8	;INPUT 8 BIT CHARACTER
   e1f0   84 7f         	AND A	#%01111111	;GET RID OF PARITY BIT
   e1f2   39            	RTS
                        
   e1f3   31            BILD	INS	;FIX UP STACK WHEN USING
   e1f4   31            	INS	;BINARY LOADER ON SWTPC TAPES
   e1f5   31            	INS
                        
                        ;*INPUT ONE CHAR INTO ACC B
   e1f6   37            INCH8	PSH B		;SAVE ACC B
   e1f7   8d da         	BSR	SAVGET	;SAVE IXR, GET PORT# AND TYPE
   e1f9   26 28         	BNE	IN1	;INPUT FROM PIA IF NOT
   e1fb   86 15         	LDA A	#$15	;RECONFIG FOR 8 BIT, 1 SB
   e1fd   a7 00         	STA A	0,X
   e1ff   a6 00         ACIAIN	LDA A	0,X
   e201   47            	ASR A
   e202   24 fb         	BCC	ACIAIN	;NOT READY
   e204   a6 01         	LDA A	1,X		;LOAD CHAR
   e206   f6 a0 0c      	LDA B	PORECH
   e209   27 07         	BEQ	ACIOUT	;ECHO
   e20b   20 11         	BRA	RES	;DON'T ECHO
                        
                        ;*OUTPUT ONE CHARACTER
   e20d   37            OUTEE1	PSH B		;SAVE ACC B
   e20e   8d c3         	BSR	SAVGET
   e210   26 2e         	BNE	IOUT
                        
   e212   c6 11         ACIOUT	LDA B	#$11
   e214   e7 00         	STA B	0,X
   e216   e6 00         ACIOU1	LDA B	0,X
   e218   57            	ASR B
   e219   57            	ASR B
   e21a   24 fa         	BCC	ACIOU1	;ACIA NOT READY
   e21c   a7 01         	STA A	1,X	;OUTPUT CHARACTER
   e21e   33            RES	PUL B		;RESTORE ACC B
   e21f   fe a0 10      	LDX	XTEMP
   e222   39            	RTS
                        
                        ;*PIA INPUT ROUTINE
   e223   a6 00         IN1	LDA A	0,X	;LOOK FOR START BIT
   e225   2b fc         	BMI	IN1
   e227   8d 3a         	BSR	DDL	;DELAY HALF BIT TIME
   e229   c6 04         	LDA B	#4	;SET DEL FOR FULL BIT TIME
   e22b   e7 02         	STA B	2,X
   e22d   58            	ASL B		;SET UP CNTR WITH 8
   e22e   8d 2a         IN3	BSR	DEL	;WAIT ONE CHAR TIME
   e230   0d            	SEC
   e231   69 00         	ROL	0,X
   e233   46            	ROR A
   e234   5a            	DEC B
   e235   26 f7         	BNE	IN3
   e237   8d 21         	BSR	DEL	;WAIT FOR STOP BIT
   e239   f6 a0 0c      	LDA B	PORECH	;IS ECHO DESIRED?
   e23c   27 13         	BEQ	IOUT2	;ECHO
   e23e   20 de         	BRA	RES	;RESTORE IXR,ACCB
                        ;*PIA OUTPUT ROUTINE
   e240   8d 23         IOUT	BSR	DDL1	;DELAY ONE HALF BIT TIME
   e242   c6 0a         	LDA B	#$A	;SET UP COUNTER
   e244   6a 00         	DEC	0,X	;SET START BIT
   e246   8d 16         	BSR	DE	;START TIMER
   e248   8d 10         OUT1	BSR	DEL	;DELAY ONE BIT TIME
   e24a   a7 00         	STA A	0,X	;PUT OUT ONE DATA BIT
   e24c   0d            	SEC
   e24d   46            	ROR A		;SHIFT IN NEXT BIT
   e24e   5a            	DEC B		;DECREMENT COUNTER
   e24f   26 f7         	BNE	OUT1	;TEST FOR 0
   e251   e6 02         IOUT2	LDA B	2,X	;TEST FOR STOP BITS
   e253   58            	ASL B		;SHIFT	BIT TO SIGN
   e254   2a c8         	BPL	RES	;BRA FOR 1 STOP BIT
   e256   8d 02         	BSR	DEL	;DELAY FOR STOP BITS
   e258   20 c4         	BRA	RES
   e25a   6d 02         DEL	TST	2,X	;IS TIME UP
   e25c   2a fc         	BPL	DEL
   e25e   6c 02         DE	INC	2,X	;RESET TIMER
   e260   6a 02         	DEC	2,X
   e262   39            	RTS
                        
   e263   6f 02         DDL	CLR	2,X	;HALF BIT DELAY
   e265   8d f7         DDL1	BSR	DE
   e267   20 f1         	BRA	DEL
                        
                        
                        ;*OPTIONAL PORT ROUTINE
   e269   8d 83         OPTL	BSR	INEEE1
   e26b   16            	TAB
   e26c   7f a0 0b      	CLR	PORADD+1	;SET I/O ADDRESS FOR $8000
   e26f   fe a0 0a      	LDX	PORADD
   e272   8d 10         	BSR	PIAINI	;INITIALIZE PIA
   e274   8d 07         	BSR	PIAECH	;SET ECHO
   e276   ce e3 ef      	LDX	#TABLE1	;P, L OR E
   e279   17            	TBA
   e27a   7e e1 76      	JMP	OVER	;LOOK AT TABLE FOR E, L OR P
                        
   e27d   86 34         PIAECH	LDA A	#$34	;SET DDR
   e27f   a7 03         	STA A	3,X
   e281   a7 02         	STA A	2,X
   e283   39            NOOPT	RTS
                        
                        ;*PIA INITIALIZATION ROUTINE
   e284   6c 00         PIAINI	INC	0,X	;SET DDR
   e286   86 07         	LDA A	#$7
   e288   a7 01         	STA A	1,X
   e28a   6c 00         	INC	0,X
   e28c   a7 02         	STA A	2,X
   e28e   39            	RTS
                        
                        ;*MINIFLOPPY DISK BOOT
   e28f   7f 80 14      DISK	CLR	$8014
   e292   8d 2e         	BSR	DELAY
   e294   c6 0b         	LDA B	#$0B
   e296   8d 25         	BSR	RETT2
   e298   e6 04         LOOP1	LDA B	4,X
   e29a   c5 01         	BIT B	#1
   e29c   26 fa         	BNE	LOOP1
   e29e   6f 06         	CLR	6,X
   e2a0   8d 1d         	BSR	RETURN
   e2a2   c6 9c         	LDA B	#$9C
   e2a4   8d 17         	BSR	RETT2
   e2a6   ce 24 00      	LDX	#$2400
   e2a9   c5 02         LOOP2	BIT B	#2
   e2ab   27 06         	BEQ	LOOP3
   e2ad   b6 80 1b      	LDA A	$801B
   e2b0   a7 00         	STA A	0,X
   e2b2   08            	INX
   e2b3   f6 80 18      LOOP3	LDA B	$8018
   e2b6   c5 01         	BIT B	#1
   e2b8   26 ef         	BNE	LOOP2
   e2ba   7e 24 00      	JMP	$2400
   e2bd   e7 04         RETT2	STA B	4,X
   e2bf   8d 00         RETURN	BSR	RETT1
   e2c1   39            RETT1	RTS
                        
                        ;*GENERAL PURPOSE DELAY LOOP
   e2c2   ce ff ff      DELAY	LDX	#$FFFF
   e2c5   09            DELAY1	DEX
   e2c6   8c 80 14      	CPX	#$8014	;STOP AT 8014
   e2c9   26 fa         DUM	BNE	DELAY1
   e2cb   39            	RTS
                        
                        
                        ;*CLRAR SCREEN FOR CT-1024 TYPE TERMINALS
   e2cc   ce e0 09      CLEAR	LDX	#CURSOR
   e2cf   bd e0 7e      	JSR	PDATA1
   e2d2   8d f1         	BSR	DELAY1	;DELAY
   e2d4   bd e3 47      RDOFF1	JSR	RDOFF
   e2d7   20 58         	BRA	C4
                        
                        ;*BREAKPOINT ENTERING ROUTINE
   e2d9   ce e1 23      BREAK	LDX	#SF0
   e2dc   bc a0 12      	CPX	SWIJMP	;BREAKPOINTS ALREADY IN USE?
   e2df   27 1a         	BEQ	INUSE
   e2e1   08            	INX
   e2e2   8d 32         BREAK0	BSR	STO1
   e2e4   bd e0 47      	JSR	BADDR
   e2e7   ff a0 14      	STX	BKPT
   e2ea   a6 00         	LDA A	0,X
   e2ec   b7 a0 16      	STA A	BKLST
   e2ef   86 3f         	LDA A	#$3F
   e2f1   a7 00         	STA A	0,X
   e2f3   ce e1 23      	LDX	#SF0
   e2f6   8d 1e         	BSR	STO1
   e2f8   7e e1 6b      	JMP	CONTR1
   e2fb   fe a0 14      INUSE	LDX	BKPT
   e2fe   b6 a0 16      	LDA A	BKLST
   e301   a7 00         	STA A	0,X
   e303   ce e1 24      	LDX	#SFE1
   e306   20 da         	BRA	BREAK0
                        
   e308   b7 a0 43      SWISET	STA A	STACK+1	;FIX POWER UP INTERRUPT
   e30b   fe a0 12      	LDX	SWIJMP
   e30e   8c e1 23      	CPX	#SF0
   e311   27 06         	BEQ	STORTN
   e313   ce e1 24      STO	LDX	#SFE1
   e316   ff a0 12      STO1	STX	SWIJMP
   e319   39            STORTN	RTS
                        
   e31a   8d 5a         PUNCH1	BSR	PUNCH
   e31c   20 0f         	BRA	POFC4
                        
                        ;*FORMAT END OF TAPE WITH PGM. CTR. AND S9
   e31e   ce a0 49      PNCHS9	LDX	#$A049
   e321   ff a0 04      	STX	ENDA
   e324   09            	DEX
   e325   8d 52         	BSR	PUNCH2
   e327   ce e1 90      	LDX	#S9
   e32a   bd e0 7e      PDAT	JSR	PDATA1
   e32d   8d 24         POFC4	BSR	PNCHOF
   e32f   8d 91         	BSR	DELAY
   e331   7e e1 52      C4	JMP	CONTRL
                        
   e334   73 a0 0c      RDON	COM	PORECH	;DISABLE ECHO FOR ACIA
   e337   86 11         	LDA A	#$11	;RON CHAR.
   e339   c6 20         	LDA B	#$20	;STROBE CHAR
   e33b   8d 1a         	BSR	STROBE
   e33d   bd e1 d9      	JSR	ISACIA	;CHECK TO SEE IF PIA
   e340   27 04         	BEQ	RTNN
   e342   86 3c         	LDA A	#$3C	;DISABLE PIA ECHO IF PIA
   e344   a7 03         	STA A	3,X
   e346   39            RTNN	RTS
                        
   e347   86 13         RDOFF	LDA A	#$13	;TURN READER OFF
   e349   c6 10         	LDA B	#$10
   e34b   20 0a         	BRA	STROBE
                        
   e34d   86 12         PNCHON	LDA A	#$12
   e34f   c6 04         	LDA B	#4
   e351   20 04         	BRA	STROBE
                        
   e353   86 14         PNCHOF	LDA A	#$14
   e355   c6 08         	LDA B	#$8
                        
                        ;*PIA STROBING ROUTINE FOR PUNCH/READ ON/OFF
   e357   bd e0 75      STROBE	JSR	OUTCH
   e35a   bd e1 d6      	JSR	GETPT1
   e35d   27 16         	BEQ	RTN1
   e35f   86 02         	LDA A	#2
   e361   ca 01         	ORA B	#1
   e363   8d 0c         	BSR	STR2
   e365   8d 08         	BSR	STR1
   e367   86 02         	LDA A	#2
   e369   c6 01         	LDA B	#1
   e36b   e7 00         	STA B	0,X
   e36d   8d 02         	BSR	STR2
   e36f   86 06         STR1	LDA A	#6
   e371   a7 01         STR2	STA A	1,X
   e373   e7 00         	STA B	0,X
   e375   39            RTN1	RTS
                        
                        ;*PUNCH FROM BEGINNING ADDRESS (BEGA) THRU
                        ;*ENDING ADDRESS (ENDA)
   e376   fe a0 02      PUNCH	LDX	BEGA
   e379   ff a0 44      PUNCH2	STX	TW
   e37c   8d cf         	BSR	PNCHON
   e37e   b6 a0 05      PUN11	LDA A	ENDA+1
   e381   b0 a0 45      	SUB A	TW+1
   e384   f6 a0 04      	LDA B	ENDA
   e387   f2 a0 44      	SBC B	TW
   e38a   26 04         	BNE	PUN22
   e38c   81 10         	CMP A	#16
   e38e   25 02         	BCS	PUN23
   e390   86 0f         PUN22	LDA A	#15
   e392   8b 04         PUN23	ADD A	#4
   e394   b7 a0 47      	STA A	BYTECT
   e397   80 03         	SUB A	#3
   e399   b7 a0 46      	STA A	TEMP
                        ;*PUNCH C/R L/F NULLS S1
   e39c   ce e1 93      	LDX	#MTAPE1
   e39f   bd e0 7e      	JSR	PDATA1
   e3a2   5f            	CLR B
                        ;*PUNCH FRAME COUNT
   e3a3   ce a0 47      	LDX	#BYTECT
   e3a6   8d 24         	BSR	PUNT2	;PUNCH 2 HEX CHARACTERS
                        ;*PUNCH ADDRESS
   e3a8   ce a0 44      	LDX	#TW
   e3ab   8d 1f         	BSR	PUNT2
   e3ad   8d 1d         	BSR	PUNT2
                        ;*PUNCH DATA
   e3af   fe a0 44      	LDX	TW
   e3b2   8d 18         PUN32	BSR	PUNT2		;PUNCH ONE BYTE
   e3b4   7a a0 46      	DEC	TEMP
   e3b7   26 f9         	BNE	PUN32
   e3b9   ff a0 44      	STX	TW
   e3bc   53            	COM B
   e3bd   37            	PSH B
   e3be   30            	TSX
   e3bf   8d 0b         	BSR	PUNT2		;PUNCH CHECKSUM
   e3c1   33            	PUL B		;RESTORE	STACK
   e3c2   fe a0 44      	LDX	TW
   e3c5   09            	DEX
   e3c6   bc a0 04      	CPX	ENDA
   e3c9   26 b3         	BNE	PUN11
   e3cb   39            RTN5	RTS
                        
                        ;*PUNCH 2 HEX CHAR, UPDATE CHECKSUM
   e3cc   eb 00         PUNT2	ADD B	0,X
   e3ce   7e e0 bf      	JMP	OUT2H	;OUTPUT 2 HEX CHAR AND RTS
                        
                        ;*COMMAND TABLE
   e3d1   47            TABLE	FCB	'G'	;GOTO
   e3d2   e1 d0         	FDB	GOTO
   e3d4   5a            	FCB	'Z'	;GOTO PROM
   e3d5   c0 00         	FDB	PROM
   e3d7   4d            	FCB	'M'	;MEMORY EXAM AND CHANGE
   e3d8   e0 88         	FDB	CHANGE
   e3da   46            	FCB	'F'	;BYTE SEARCH
   e3db   e1 ae         	FDB	SEARCH
   e3dd   52            	FCB	'R'	;REGISTER DUMP
   e3de   e1 30         	FDB	PRINT
   e3e0   4a            	FCB	'J'	;JUMP
   e3e1   e0 05         	FDB	JUMP
   e3e3   43            	FCB	'C'	;CLEAR SCREEN
   e3e4   e2 cc         	FDB	CLEAR
   e3e6   44            	FCB	'D'	;DISK BOOT
   e3e7   e2 8f         	FDB	DISK
   e3e9   42            	FCB	'B'	;BREAKPOINT
   e3ea   e2 d9         	FDB	BREAK
   e3ec   4f            	FCB	'O'	;OPTIONAL PORT
   e3ed   e2 69         	FDB	OPTL
   e3ef   50            TABLE1	FCB	'P'	;ASCII PUNCH
   e3f0   e3 1a         	FDB	PUNCH1
   e3f2   4c            	FCB	'L'	;ASCII LOAD
   e3f3   e0 0c         	FDB	LOAD
   e3f5   45            TABEND	FCB	'E'	;END OF TAPE
   e3f6   e3 1e         	FDB	PNCHS9
                        
   e3f8                 	ORG	$E3F8
   e3f8   e0 00         	FDB	IRQV	;IRQ VECTOR
   e3fa   e1 8b         	FDB	SFE	;SOFTWARE INTERRUPT
   e3fc   e1 a7         	FDB	NMIV	;NMI VECTOR
   e3fe   e0 d0         	FDB	START	;RESTART VECTOR
                        
                        ;*	ORG	$A048
                        ;*	FDB	START
   e400                 	END
e1ff  ACIAIN        e216  ACIOU1        e212  ACIOUT        e101  AL1       
e117  AL2           e0d5  AL3           e0e5  AL4           e09b  ANOTH     
e047  BADDR         a002  BEGA          e1f3  BILD          a016  BKLST     
a014  BKPT          e2d9  BREAK         e2e2  BREAK0        e055  BYTE      
e057  BYTE1         a047  BYTECT        e085  C1            e0fc  C3        
e331  C4            e08a  CHA51         e088  CHANGE        a00f  CKSM      
e2cc  CLEAR         e16b  CONTR1        e152  CONTRL        8004  CTLPOR    
e009  CURSOR        e263  DDL           e265  DDL1          e25e  DE        
e25a  DEL           e2c2  DELAY         e2c5  DELAY1        e28f  DISK      
e2c9  DUM           e1a5  EIA5          a004  ENDA          e0e3  EOE3      
e1d6  GETPT1        e1d0  GOTO          e223  IN1           e0be  IN1HG     
e22e  IN3           e078  INCH          e1f6  INCH8         e1e6  INCR1     
e1ac  INEEE         e1ee  INEEE1        e0aa  INHEX         e0ac  INHEX1    
e2fb  INUSE         e240  IOUT          e251  IOUT2         a000  IRQ       
e000  IRQV          e1d9  ISACIA        e005  JUMP          e00c  LOAD      
e02b  LOAD11        e03b  LOAD15        e040  LOAD19        e044  LOAD21    
e00f  LOAD3         e173  LOOK          e298  LOOP1         e2a9  LOOP2     
e2b3  LOOP3         e19d  MCL           e19c  MCLOFF        e193  MTAPE1    
a006  NMI           e1a7  NMIV          e283  NOOPT         e269  OPTL      
e248  OUT1          e0bf  OUT2H         e0c1  OUT2HA        e0ca  OUT2HS    
e0c8  OUT4HS        e075  OUTCH         e20d  OUTEE1        e1d1  OUTEEE    
e067  OUTHL         e06b  OUTHR         e0cc  OUTS          e1bb  OVE       
e176  OVER          e32a  PDAT          e07e  PDATA1        e07b  PDATA2    
e27d  PIAECH        e284  PIAINI        e353  PNCHOF        e34d  PNCHON    
e31e  PNCHS9        e1c5  PNT           e165  POF1          e32d  POFC4     
a00a  PORADD        a00c  PORECH        e130  PRINT         c000  PROM      
e37e  PUN11         e390  PUN22         e392  PUN23         e3b2  PUN32     
e376  PUNCH         e31a  PUNCH1        e379  PUNCH2        e3cc  PUNT2     
e347  RDOFF         e2d4  RDOFF1        e334  RDON          e21e  RES       
e2c1  RETT1         e2bd  RETT2         e2bf  RETURN        e375  RTN1      
e3cb  RTN5          e346  RTNN          e190  S9            e1d3  SAVGET    
e1ae  SEARCH        e123  SF0           e18b  SFE           e124  SFE1      
e0de  SK1           e181  SK3           e1e0  SKP0          a008  SP        
a042  STACK         e0d0  START         e313  STO           e316  STO1      
e319  STORTN        e36f  STR1          e371  STR2          e357  STROBE    
a012  SWIJMP        e308  SWISET        e14a  SWTCTL        e189  SWTL1     
e3f5  TABEND        e3d1  TABLE         e3ef  TABLE1        a046  TEMP      
a044  TW            a00d  XHI           a00e  XLOW          a010  XTEMP     
